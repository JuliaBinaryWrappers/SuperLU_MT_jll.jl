# Autogenerated wrapper script for SuperLU_MT_jll for aarch64-linux-gnu
export libsuperlumtc, libsuperlumtz, libsuperlumts, libsuperlumtd

using CompilerSupportLibraries_jll
using OpenBLAS32_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `libsuperlumtc`
const libsuperlumtc_splitpath = ["lib", "libsuperlumtc.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsuperlumtc_path = ""

# libsuperlumtc-specific global declaration
# This will be filled out by __init__()
libsuperlumtc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsuperlumtc = "libsuperlumtc.so"


# Relative path to `libsuperlumtz`
const libsuperlumtz_splitpath = ["lib", "libsuperlumtz.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsuperlumtz_path = ""

# libsuperlumtz-specific global declaration
# This will be filled out by __init__()
libsuperlumtz_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsuperlumtz = "libsuperlumtz.so"


# Relative path to `libsuperlumts`
const libsuperlumts_splitpath = ["lib", "libsuperlumts.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsuperlumts_path = ""

# libsuperlumts-specific global declaration
# This will be filled out by __init__()
libsuperlumts_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsuperlumts = "libsuperlumts.so"


# Relative path to `libsuperlumtd`
const libsuperlumtd_splitpath = ["lib", "libsuperlumtd.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsuperlumtd_path = ""

# libsuperlumtd-specific global declaration
# This will be filled out by __init__()
libsuperlumtd_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsuperlumtd = "libsuperlumtd.so"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"SuperLU_MT")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # We first need to add to LIBPATH_list the libraries provided by Julia
    append!(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)])
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (CompilerSupportLibraries_jll.PATH_list, OpenBLAS32_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (CompilerSupportLibraries_jll.LIBPATH_list, OpenBLAS32_jll.LIBPATH_list,))

    global libsuperlumtc_path = normpath(joinpath(artifact_dir, libsuperlumtc_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsuperlumtc_handle = dlopen(libsuperlumtc_path)
    push!(LIBPATH_list, dirname(libsuperlumtc_path))

    global libsuperlumtz_path = normpath(joinpath(artifact_dir, libsuperlumtz_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsuperlumtz_handle = dlopen(libsuperlumtz_path)
    push!(LIBPATH_list, dirname(libsuperlumtz_path))

    global libsuperlumts_path = normpath(joinpath(artifact_dir, libsuperlumts_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsuperlumts_handle = dlopen(libsuperlumts_path)
    push!(LIBPATH_list, dirname(libsuperlumts_path))

    global libsuperlumtd_path = normpath(joinpath(artifact_dir, libsuperlumtd_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsuperlumtd_handle = dlopen(libsuperlumtd_path)
    push!(LIBPATH_list, dirname(libsuperlumtd_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

